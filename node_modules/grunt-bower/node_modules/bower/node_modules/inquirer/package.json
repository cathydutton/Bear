{
  "name": "inquirer",
  "version": "0.2.5",
  "description": "A collection of common interactive command line user interfaces.",
  "main": "lib/inquirer.js",
  "scripts": {
    "test": "grunt --verbose"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SBoudrias/Inquirer.js.git"
  },
  "keywords": [
    "command",
    "prompt",
    "stdin",
    "cli"
  ],
  "author": {
    "name": "Simon Boudrias",
    "email": "admin@simonboudrias.com"
  },
  "license": "MIT",
  "dependencies": {
    "lodash": "~1.2.1",
    "async": "~0.2.8",
    "cli-color": "~0.2.2",
    "mute-stream": "0.0.3"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.8",
    "grunt-simple-mocha": "~0.4.0",
    "mocha": "~1.9.0",
    "chai": "~1.6.0",
    "grunt-contrib-jshint": "~0.5.1",
    "sinon": "~1.7.2",
    "proxyquire": "~0.4.1",
    "grunt-release": "~0.3.3"
  },
  "readme": "Inquirer.js  [![Build Status](https://travis-ci.org/SBoudrias/Inquirer.js.png?branch=master)](http://travis-ci.org/SBoudrias/Inquirer.js)\r\n=====================\r\n\r\nA collection of common interactive command line user interfaces.\r\n\r\n\r\nGoal and philosophy\r\n---------------------\r\n\r\nWe strive at providing easily embeddable and beautiful command line interface for Node.js ;\r\nsome hope in becoming the CLI Xanadu.\r\n\r\n_Inquirer_ should ease the process of asking end user **questions**, **parsing**, **validating** answers, managing **hierarchical prompts** and providing **error feedback**.\r\n\r\n_Inquirer_ provide the user interface, and the inquiry session flow. If you're searching for a full blown command line program utility, then check out [Commander.js](https://github.com/visionmedia/commander.js) (inspired by) or [Cli-color](https://github.com/medikoo/cli-color) (used internally).\r\n\r\n\r\nDocumentation\r\n=====================\r\n\r\n\r\nInstallation\r\n---------------------\r\n\r\n``` prompt\r\nnpm install inquirer\r\n```\r\n\r\n```javascript\r\nvar inquirer = require(\"inquirer\");\r\ninquirer.prompt([/* Pass your questions in here */], function( answers ) {\r\n\t// Use user feedback for... whatever!!\r\n});\r\n```\r\n\r\n\r\nExamples (Run it and see it)\r\n---------------------\r\n\r\nCheckout the `examples/` folder for code and interface examples.\r\n\r\n``` prompt\r\nnode examples/pizza.js\r\n# etc\r\n```\r\n\r\n\r\nMethods\r\n---------------------\r\n\r\n### `inquirer.prompt( questions, callback )`\r\n\r\nLaunch the prompt interface (inquiry session)\r\n\r\n+ **questions** (Array) containing [Question Object](#question)\r\n+ **callback** (Function) first parameter is the [Answers Object](#answers)\r\n\r\n\r\nObjects\r\n---------------------\r\n\r\n### Question\r\nA question object is a `hash` containing question related values:\r\n\r\n+ **type**: (String) Type of the prompt. Defaults: `input` - Possible values: `input`, `confirm`,\r\n`list`, `rawlist`\r\n+ **name**: (String) The name to use when storing the answer in the anwers hash.\r\n+ **message**: (String) The question to print.\r\n+ **default**: (String|Function) Default value to use if nothing is entered, or a function that returns the default value. If defined as a function, the first parameter will be the current inquirer session answers. \r\n+ **choices**: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers.  \r\nArray values can be simple `strings`, or `objects` containing a `name` (to display) and a `value` properties (to save in the answers hash).\r\n+ **validate**: (Function) Receive the user input and should return `true` if the value is valid, and an error message (`String`) otherwise. If `false` is returned, a default error message is provided.\r\n+ **filter**: (Function) Receive the user input and return the filtered value to be used inside the program. The value returned will be added to the _Answers_ hash.\r\n+ **when**: (Function) Receive the current user answers hash and should return `true` or `false` depending on wheter or not this question should be asked.\r\n\r\n`validate`, `filter` and `when` functions can be asynchronously using `this.async()`. You just have to pass the value you'd normally return to the callback option.\r\n\r\n``` javascript\r\n{\r\n  validate: function(input) {\r\n\r\n    // Declare function as asynchronous, and save the done callback\r\n    var done = this.async();\r\n\r\n    // Do async stuff\r\n    setTimeout(function() {\r\n      if (typeof input !== \"number\") {\r\n        // Pass the return value in the done callback\r\n        done(\"You need to provide a number\");\r\n        return;\r\n      }\r\n      // Pass the return value in the done callback\r\n      done(true);\r\n    }, 3000);\r\n  }\r\n}\r\n```\r\n\r\n### Answers\r\nA key/value hash containing the client answers in each prompt.\r\n\r\n+ **Key** The `name` property of the _question_ object\r\n+ **Value** (Depends on the prompt)\r\n  + `confirm`: (Boolean)\r\n  + `input` : User input (filtered if `filter` is defined) (String)\r\n  + `rawlist`, `list` : Selected choice value (or name if no value specified) (String)\r\n\r\n\r\nPrompts type\r\n---------------------\r\n\r\n_allowed options written inside square brackets (`[]`) are optional. Others are required._\r\n\r\n### List - `{ type: \"list\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must be the choice `index` in the array)\r\n\r\n![List prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/list-prompt.png)\r\n\r\n### Raw List - `{ type: \"rawlist\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must the choice `index` in the array)\r\n\r\n![Raw list prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/rawlist-prompt.png)\r\n\r\n### Expand - `{ type: \"expand\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `default`, `filter`] properties. (Note that\r\ndefault must be the choice `index` in the array)\r\n\r\nNote that the `choice` object will take an extra parameter called `key` for the `expand` prompt. This parameter must be a single (lowercased) character. The `h` option is added by the prompt and shouldn't be defined by the user.\r\n\r\nSee `examples/expand.js` for a running example.\r\n\r\n![Expand prompt closed](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-1.png)\r\n![Expand prompt expanded](https://dl.dropboxusercontent.com/u/59696254/inquirer/expand-prompt-2.png)\r\n\r\n\r\n### Checkbox - `{ type: \"checkbox\" }`\r\n\r\nTake `type`, `name`, `message`, `choices`[, `filter`, `validate`] properties.\r\n\r\nChoices marked as `{ checked: true }` will be checked by default.\r\n\r\n![Checkbox prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/checkbox-prompt.png)\r\n\r\n### Confirm - `{ type: \"confirm\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`] properties. `default` is expected to be a boolean if used.\r\n\r\n![Confirm prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/confirm-prompt.png)\r\n\r\n### Input - `{ type: \"input\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n![Input prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/input-prompt.png)\r\n\r\n### Password - `{ type: \"password\" }`\r\n\r\nTake `type`, `name`, `message`[, `default`, `filter`, `validate`] properties.\r\n\r\n![Password prompt](https://dl.dropboxusercontent.com/u/59696254/inquirer/password-prompt.png)\r\n\r\n\r\n\r\nSupport (OS - terminals)\r\n=====================\r\n\r\nYou should expect mostly good support for the CLI below. This does not mean we won't\r\nlook at issues found on other command line - feel free to report any!\r\n\r\n- **Mac OS**:\r\n  - Terminal.app\r\n  - iTerm\r\n- **Windows**:\r\n  - cmd.exe\r\n  - Powershell\r\n  - Cygwin\r\n- **Ubuntu**:\r\n  - Terminal\r\n\r\n\r\nNews on the march (Release notes)\r\n=====================\r\n\r\nPlease refer to the [Github releases section for the changelog](https://github.com/SBoudrias/Inquirer.js/releases)\r\n\r\n\r\nContributing\r\n=====================\r\n\r\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \r\n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\r\nor bug fix. `npm test` to run the test suite.  \r\n**Documentation**: Add documentation for every API change. Feel free to send corrections\r\nor better docs!  \r\n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\r\n\r\nWe're looking to offer good support for multiple prompts and environments. If you want to\r\nhelp, we'd like to keep a list of testers for each terminal/OS so we can contact you and\r\nget feedback before release. Let us know if you want to be added to the list (just tweet\r\nto @vaxilart) or just add your name to [the wiki](https://github.com/SBoudrias/Inquirer.js/wiki/Testers)\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2012 Simon Boudrias (twitter: @vaxilart)  \r\nLicensed under the MIT license.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/SBoudrias/Inquirer.js/issues"
  },
  "homepage": "https://github.com/SBoudrias/Inquirer.js",
  "_id": "inquirer@0.2.5",
  "_from": "inquirer@~0.2.2"
}
